name: Publish to PyPI (manual)

on:
  workflow_dispatch:
    inputs:
      confirm:
        description: "Confirm publish to PyPI"
        required: true
        type: boolean

jobs:
  build-and-publish:
    if: ${{ github.event.inputs.confirm == 'true' && startsWith(github.ref_name, 'release/') }}
    runs-on: windows-2022
    permissions:
      contents: read

    env:
      # Avoid update-check noise during CI
      MOLDFLOW_API_NO_UPDATE_CHECK: '1'

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'
      - name: Check if version exists on PyPI
        id: pypi_check
        shell: pwsh
        run: |
          $packageName = 'moldflow'
          try {
            $resp = Invoke-WebRequest -Uri "https://pypi.org/pypi/$packageName/json" -UseBasicParsing -ErrorAction Stop
            $data = $resp.Content | ConvertFrom-Json
            $versions = @($data.releases.PSObject.Properties.Name)
          } catch {
            $versions = @()
          }
          $versionJson = Get-Content -Raw -Path version.json | ConvertFrom-Json
          $patch = if ($env:BUILD_NUMBER) { $env:BUILD_NUMBER } else { "$($versionJson.patch)" }
          $version = "$($versionJson.major).$($versionJson.minor).$patch"
          $exists = if ($versions -contains $version) { 'true' } else { 'false' }
          Write-Host "Release $version exists on PyPI: $exists"
          "exists=$exists" | Out-File -FilePath $env:GITHUB_OUTPUT -Append -Encoding utf8
          "version=$version" | Out-File -FilePath $env:GITHUB_OUTPUT -Append -Encoding utf8
      - name: Skip publish, version already exists
        if: steps.pypi_check.outputs.exists == 'true'
        run: echo "Version ${{ steps.pypi_check.outputs.version }} already exists on PyPI. Skipping publish."

      - name: Install build dependencies
        if: steps.pypi_check.outputs.exists == 'false'
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Fill localization gaps (autofix and compile later)
        if: steps.pypi_check.outputs.exists == 'false'
        run: |
          python scripts/check_localization.py --path src/moldflow --locale-path src/moldflow/locale

      - name: Build package
        if: steps.pypi_check.outputs.exists == 'false'
        run: |
          python run.py build

      - name: Publish to PyPI
        if: steps.pypi_check.outputs.exists == 'false'
        env:
          TWINE_USERNAME: __token__
          TWINE_PASSWORD: ${{ secrets.PYPI_API_TOKEN }}
        run: |
          python run.py publish -s
